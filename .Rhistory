# Fit the regression models
lm_model <- lm(formula, data = subset_data)
lmSLX_model <- lmSLX(formula, data = subset_data, weight)
lagsarlm_model <- lagsarlm(formula, data = subset_data, weight)
errorsarlm_model <- errorsarlm(formula, data = subset_data, weight)
# Extract the AIC and BIC values for each model
aic_values <- AIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model)
bic_values <- BIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model)
# Store the AIC and BIC values in the list
aic[[month_pair]] <- list(AIC = aic_values)
bic[[month_pair]] <- list(BIC = bic_values)
}
View(lm_model)
View(lm_model)
View(panelq_sf)
View(panelq_sf)
# Loop through each month pair
for (month_pair in month_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(month_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
months <- strsplit(month_pair, "_")[[1]]
start_month <- months[1]
end_month <- months[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_month, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression models
lm_model <- lm(formula, data = subset_data)
lagsarlm_model <- lagsarlm(formula, data = subset_data, weight)
errorsarlm_model <- errorsarlm(formula, data = subset_data, weight)
durbin_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the AIC and BIC values for each model
aic_values <- AIC(lm_model, lagsarlm_model, errorsarlm_model, durbin_model)
bic_values <- BIC(lm_model, lagsarlm_model, errorsarlm_model, durbin_model)
# Store the AIC and BIC values in the list
aic[[month_pair]] <- list(AIC = aic_values)
bic[[month_pair]] <- list(BIC = bic_values)
}
lmSLX_model <- lmSLX(formula, data = subset_data, weight)
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q318","q418"), ]
subsetnb <- poly2nb(subset_data, queen = TRUE )
weight <- nb2listw(subsetnb, style="B")
reg <- lmSLX(viirs~pop+treat, data = subset_data, weight)
summary(reg)
reg <- lmSLX(viirs~pop+treat+treat:dq418, data = subset_data, weight)
reg <- lmSLX(viirs~pop+treat+treat*dq418, data = subset_data, weight)
library(sf)
library(sp)
library(dplyr)
library(tidyr)
library(spatialreg)
#library(spdep)
library(writexl)
#Load the data
panelq_sf <- st_read("data/output/panelq.geojson")
#Create quarter pair
quarter_pairs <-c("q218_q318", "q318_q418", "q418_q119", "q119_q219", "q219_q319", "q319_q419")
#Create weight
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q318","q418"), ]
subsetnb <- poly2nb(subset_data, queen = TRUE )
weight <- nb2listw(subsetnb, style="B")
aic = list()
bic = list()
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
quarters <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarters[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression models
lm_model <- lm(formula, data = subset_data)
lmSLX_model <- lmSLX(formula, data = subset_data, weight)
lagsarlm_model <- lagsarlm(formula, data = subset_data, weight)
errorsarlm_model <- errorsarlm(formula, data = subset_data, weight)
durbin_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the AIC and BIC values for each model
aic_values <- AIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
bic_values <- BIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
# Store the AIC and BIC values in the list
aic[[quarter_pair]] <- list(AIC = aic_values)
bic[[quarter_pair]] <- list(BIC = bic_values)
}
library(sf)
library(sp)
library(dplyr)
library(tidyr)
#library(spatialreg)
library(spdep)
library(writexl)
#Load the data
panelq_sf <- st_read("data/output/panelq.geojson")
#Create quarter pair
quarter_pairs <-c("q218_q318", "q318_q418", "q418_q119", "q119_q219", "q219_q319", "q319_q419")
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q318","q418"), ]
subsetnb <- poly2nb(subset_data, queen = TRUE )
weight <- nb2listw(subsetnb, style="B")
aic = list()
bic = list()
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
quarters <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarters[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression models
lm_model <- lm(formula, data = subset_data)
lmSLX_model <- lmSLX(formula, data = subset_data, weight)
lagsarlm_model <- lagsarlm(formula, data = subset_data, weight)
errorsarlm_model <- errorsarlm(formula, data = subset_data, weight)
durbin_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the AIC and BIC values for each model
aic_values <- AIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
bic_values <- BIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
# Store the AIC and BIC values in the list
aic[[quarter_pair]] <- list(AIC = aic_values)
bic[[quarter_pair]] <- list(BIC = bic_values)
}
#Create weight
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q318","q418"), ]
reg <- lmSLX(viirs ~ treat + dq418)
reg <- lmSLX(viirs ~ treat + dq418, data = subset_data, weight)
#Create weight
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q218","q318"), ]
reg <- lmSLX(viirs ~ treat + dq318, data = subset_data, weight)
View(subset_data)
View(subset_data)
str(subset_data$dq318)
summary(subset_data$dq318)
sum(is.na(subset_data$dq318))
summary(subset_data$treat)
str(subset_data$treat)
str(subset_data$dq318)
reg <- lmSLX(viirs ~ treat + pop, data = subset_data, weight)
reg <- lmSLX(viirs ~ treat + dq318, data = subset_data, weight)
library(sf)
library(sp)
library(dplyr)
library(tidyr)
#library(spatialreg)
library(spdep)
library(writexl)
#Load the data
panelq_sf <- st_read("data/output/panelq.geojson")
#Create quarter pair
quarter_pairs <-c("q218_q318", "q318_q418", "q418_q119", "q119_q219", "q219_q319", "q319_q419")
#Create weight
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q218","q318"), ]
subsetnb <- poly2nb(subset_data, queen = TRUE )
weight <- nb2listw(subsetnb, style="B")
aic = list()
bic = list()
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
quarters <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarters[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression models
lm_model <- lm(formula, data = subset_data)
lmSLX_model <- lmSLX(formula, data = subset_data, weight)
lagsarlm_model <- lagsarlm(formula, data = subset_data, weight)
errorsarlm_model <- errorsarlm(formula, data = subset_data, weight)
durbin_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the AIC and BIC values for each model
aic_values <- AIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
bic_values <- BIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
# Store the AIC and BIC values in the list
aic[[quarter_pair]] <- list(AIC = aic_values)
bic[[quarter_pair]] <- list(BIC = bic_values)
}
library(sf)
library(sp)
library(dplyr)
library(tidyr)
library(spatialreg)
#library(spdep)
library(writexl)
#Load the data
panelq_sf <- st_read("data/output/panelq.geojson")
#Create quarter pair
quarter_pairs <-c("q218_q318", "q318_q418", "q418_q119", "q119_q219", "q219_q319", "q319_q419")
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q218","q318"), ]
subsetnb <- poly2nb(subset_data, queen = TRUE )
weight <- nb2listw(subsetnb, style="B")
aic = list()
bic = list()
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
quarters <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarters[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression models
lm_model <- lm(formula, data = subset_data)
lmSLX_model <- lmSLX(formula, data = subset_data, weight)
lagsarlm_model <- lagsarlm(formula, data = subset_data, weight)
errorsarlm_model <- errorsarlm(formula, data = subset_data, weight)
durbin_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the AIC and BIC values for each model
aic_values <- AIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
bic_values <- BIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
# Store the AIC and BIC values in the list
aic[[quarter_pair]] <- list(AIC = aic_values)
bic[[quarter_pair]] <- list(BIC = bic_values)
}
library(sf)
library(sp)
library(dplyr)
library(tidyr)
library(spatialreg)
library(writexl)
#Load the data
panelq_sf <- st_read("data/output/panelq.geojson")
#Create quarter pair
quarter_pairs <-c("q218_q318", "q318_q418", "q418_q119", "q119_q219", "q219_q319", "q319_q419")
#Create weight
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q218","q318"), ]
#Create weight
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q318","q418"), ]
subsetnb <- poly2nb(subset_data, queen = TRUE )
library(spdep)
subsetnb <- poly2nb(subset_data, queen = TRUE )
weight <- nb2listw(subsetnb, style="B")
aic = list()
bic = list()
reg <- lmSLX(viirs~dq418+treat+dq418:treat+tri+pop, data=subset_data, weight)
View(subset_data)
View(subset_data)
reg <- lagsarlm(viirs~dq418+treat+dq418:treat+tri+pop, data=subset_data, weight, type=mixed)
reg <- lagsarlm(viirs~dq418+treat+dq418:treat+tri+pop, data=subset_data, weight, type="mixed")
summary(reg)
save.image("~/Earrthquake_Impact/bingung.RData")
library(sf)
library(spatialreg)
library(spdep)
#Create quarter pair
quarter_pairs <-c("q218_q318", "q318_q418", "q418_q119", "q119_q219", "q219_q319", "q319_q419")
#Create weight
subset_data <- panelq_sf[panelq_sf$quarter %in% c( "q318","q418"), ]
subsetnb <- poly2nb(subset_data, queen = TRUE )
weight <- nb2listw(subsetnb)
reg <- lagsarlm(viirs~dq418+treat+dq418:treat+tri+pop, data=subset_data, weight, type="mixed")
summary(reg)
aic = list()
bic = list()
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
quarters <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarters[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression models
lm_model <- lm(formula, data = subset_data)
lmSLX_model <- lmSLX(formula, data = subset_data, weight)
lagsarlm_model <- lagsarlm(formula, data = subset_data, weight)
errorsarlm_model <- errorsarlm(formula, data = subset_data, weight)
durbin_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the AIC and BIC values for each model
aic_values <- AIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
bic_values <- BIC(lm_model, lmSLX_model, lagsarlm_model, errorsarlm_model, durbin_model)
# Store the AIC and BIC values in the list
aic[[quarter_pair]] <- list(AIC = aic_values)
bic[[quarter_pair]] <- list(BIC = bic_values)
}
aic_df <- bind_rows(aic, .id = "quarter_pair")
bic_df <- bind_rows(bic, .id = "quarter_pair")
resultsdm <- list()
# Loop through each month pair
for (month_pair in month_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(month_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
months <- strsplit(month_pair, "_")[[1]]
start_month <- months[1]
end_month <- months[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_month, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression model
reg_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the coefficients of interest
#coef_month_pair <- coef(reg_model)[paste(dummy_var, ":treat", sep = "")
resultsdm[[month_pair]] <- reg_model
}
# Loop through each month pair
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
months <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarterss[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression model
reg_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the coefficients of interest
#coef_month_pair <- coef(reg_model)[paste(dummy_var, ":treat", sep = "")
resultsdm[[month_pair]] <- reg_model
}
# Loop through each month pair
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
months <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarters[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression model
reg_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the coefficients of interest
#coef_month_pair <- coef(reg_model)[paste(dummy_var, ":treat", sep = "")
resultsdm[[month_pair]] <- reg_model
}
subsetnb <- poly2nb(subset_data, queen = TRUE )
weight <- nb2listw(subsetnb)
# Loop through each month pair
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
months <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarters[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression model
reg_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the coefficients of interest
#coef_month_pair <- coef(reg_model)[paste(dummy_var, ":treat", sep = "")
resultsdm[[quarter_pair]] <- reg_model
}
# Reshape the data frame to have month pairs as columns
sdmdf <- reshape(sdmdf,
idvar = "coef",
timevar = "month_pairs",
direction = "wide")
sdmdf <- data.frame(month_pairs = character(0),
coef = numeric(0),
se = numeric(0))
# Loop through each month pair
for (month_pair in month_pairs) {
# Extract the coefficients and standard errors from the results list
reg_model <- resultsdm[[month_pair]]
coef_month_pair <- coef(reg_model)
se_month_pair <- sqrt(diag(vcov(reg_model)))
# Exclude the intercept term from the coefficients
coef_month_pair <- coef_month_pair[-1]
se_month_pair <- se_month_pair[-1]
# Create a data frame with the coefficient values, standard errors, and month pair information
month_pair_df <- data.frame(month_pairs = month_pair,
coef = coef_month_pair,
se = se_month_pair)
# Append the data frame to the main data frame
sdmdf <- rbind(sdmdf, month_pair_df)
}
# Loop through each month pair
for (quarter_pair in quarter_pairs) {
# Extract the coefficients and standard errors from the results list
reg_model <- resultsdm[[quarter_pair]]
coef_month_pair <- coef(reg_model)
se_month_pair <- sqrt(diag(vcov(reg_model)))
# Exclude the intercept term from the coefficients
coef_month_pair <- coef_month_pair[-1]
se_month_pair <- se_month_pair[-1]
# Create a data frame with the coefficient values, standard errors, and month pair information
quarter_pair_df <- data.frame(quarter_pairs = quarter_pair,
coef = coef_month_pair,
se = se_month_pair)
# Append the data frame to the main data frame
sdmdf <- rbind(sdmdf, month_pair_df)
}
sdmdf <- data.frame(quarter_pairs = character(0),
coef = numeric(0),
se = numeric(0))
# Loop through each month pair
for (quarter_pair in quarter_pairs) {
# Extract the coefficients and standard errors from the results list
reg_model <- resultsdm[[quarter_pair]]
coef_quarter_pair <- coef(reg_model)
se_quarter_pair <- sqrt(diag(vcov(reg_model)))
# Exclude the intercept term from the coefficients
coef_quarter_pair <- coef_quarter_pair[-1]
se_quarter_pair <- se_quarter_pair[-1]
# Create a data frame with the coefficient values, standard errors, and month pair information
quarter_pair_df <- data.frame(quarter_pairs = quarter_pair,
coef = coef_quarter_pair,
se = se_quarter_pair)
# Append the data frame to the main data frame
sdmdf <- rbind(sdmdf, quarter_pair_df)
}
View(sdmdf)
View(sdmdf)
# Reshape the data frame to have month pairs as columns
sdmdf <- reshape(sdmdf,
idvar = "coef",
timevar = "quarter_pairs",
direction = "wide")
View(resultsdm)
View(resultsdm)
#Spatial Durbin Model
resultsdm <- list()
# Loop through each month pair
for (quarter_pair in quarter_pairs) {
# Subset the data for the current month pair
subset_data <- subset(panelq_sf, (quarter %in% strsplit(quarter_pair, "_")[[1]]))
# Extract the start month and end month from the month pair
quarters <- strsplit(quarter_pair, "_")[[1]]
start_quarter <- quarters[1]
end_quarter <- quarters[2]
# Construct the dummy variable name
dummy_var <- paste("d", end_quarter, sep = "")
# Define the formula for the regression model
formula <- as.formula(paste("viirs ~", dummy_var, "+ treat +", dummy_var, ":treat + pop + tri"))
# Fit the regression model
reg_model <- lagsarlm(formula, data = subset_data, weight, type="mixed")
# Extract the coefficients of interest
coef_month_pair <- coef(reg_model)[paste(dummy_var, ":treat", sep = "")]
resultsdm[[quarter_pair]] <- reg_model
}
View(sdmdf)
View(sdmdf)
View(resultsdm)
View(resultsdm)
sdmdf <- data.frame(quarter_pairs = character(0),
coef = numeric(0),
se = numeric(0))
# Loop through each month pair
for (quarter_pair in quarter_pairs) {
# Extract the coefficients and standard errors from the results list
reg_model <- resultsdm[[quarter_pair]]
coef_quarter_pair <- coef(reg_model)
se_quarter_pair <- sqrt(diag(vcov(reg_model)))
# Exclude the intercept term from the coefficients
coef_quarter_pair <- coef_quarter_pair[-1]
se_quarter_pair <- se_quarter_pair[-1]
# Create a data frame with the coefficient values, standard errors, and month pair information
quarter_pair_df <- data.frame(quarter_pairs = quarter_pair,
coef = coef_quarter_pair,
se = se_quarter_pair)
# Append the data frame to the main data frame
sdmdf <- rbind(sdmdf, quarter_pair_df)
}
# Reshape the data frame to have month pairs as columns
sdmdf <- reshape(sdmdf,
idvar = "coef",
timevar = "quarter_pairs",
direction = "wide")
View(sdmdf)
View(sdmdf)
#Generate the p_value
sdmdf$z_value <- sdmdf$coef / sdmdf$se
sdmdf <- data.frame(quarter_pairs = character(0),
coef = numeric(0),
se = numeric(0))
# Loop through each month pair
for (quarter_pair in quarter_pairs) {
# Extract the coefficients and standard errors from the results list
reg_model <- resultsdm[[quarter_pair]]
coef_quarter_pair <- coef(reg_model)
se_quarter_pair <- sqrt(diag(vcov(reg_model)))
# Exclude the intercept term from the coefficients
coef_quarter_pair <- coef_quarter_pair[-1]
se_quarter_pair <- se_quarter_pair[-1]
# Create a data frame with the coefficient values, standard errors, and month pair information
quarter_pair_df <- data.frame(quarter_pairs = quarter_pair,
coef = coef_quarter_pair,
se = se_quarter_pair)
# Append the data frame to the main data frame
sdmdf <- rbind(sdmdf, quarter_pair_df)
}
#Generate the p_value
sdmdf$z_value <- sdmdf$coef / sdmdf$se
sdmdf$p_value <- 2 * (1 - pnorm(abs(sdmdf$z_value)))
library(writexl)
write_xlsx(sdmdf, "report/regression/sdmdf.xlsx")
